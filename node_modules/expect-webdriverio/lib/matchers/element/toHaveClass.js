import { waitUntil, enhanceError, executeCommand, wrapExpectedWithArray, updateElementsArray } from '../../utils.js';
async function condition(el, attribute, value, options) {
    const { ignoreCase = false, trim = false, containing = false } = options;
    let attr = await el.getAttribute(attribute);
    if (typeof attr !== 'string') {
        return { result: false };
    }
    if (trim) {
        attr = attr.trim();
    }
    if (ignoreCase) {
        attr = attr.toLowerCase();
        if (!(value instanceof RegExp)) {
            value = value.toLowerCase();
        }
    }
    const classes = attr.split(' ');
    const valueInClasses = classes.some((t) => {
        return value instanceof RegExp ? !!t.match(value) : containing ? t.includes(value) : t === value;
    });
    return {
        value: attr,
        result: valueInClasses
    };
}
export function toHaveElementClass(...args) {
    return toHaveClass.call(this || {}, ...args);
}
export async function toHaveClass(received, className, options = {}) {
    const isNot = this.isNot;
    const { expectation = 'class', verb = 'have' } = this;
    const attribute = 'class';
    let el = await received;
    let attr;
    const pass = await waitUntil(async () => {
        const result = await executeCommand.call(this, el, condition, options, [attribute, className, options]);
        el = result.el;
        attr = result.values;
        return result.success;
    }, isNot, options);
    updateElementsArray(pass, received, el);
    const message = enhanceError(el, wrapExpectedWithArray(el, attr, className), attr, this, verb, expectation, '', options);
    return {
        pass,
        message: () => message
    };
}
