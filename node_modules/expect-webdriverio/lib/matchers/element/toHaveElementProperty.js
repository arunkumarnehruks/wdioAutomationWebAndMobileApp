import { waitUntil, enhanceError, compareText, executeCommand, wrapExpectedWithArray, updateElementsArray, } from '../../utils.js';
async function condition(el, property, value, options = {}) {
    const { asString = false } = options;
    let prop = await el.getProperty(property);
    if (prop === null || prop === undefined) {
        return { result: false, value: prop };
    }
    if (value === null) {
        return { result: true, value: prop };
    }
    if (!(value instanceof RegExp) && (typeof value !== 'string' || (typeof prop !== 'string' && !asString))) {
        return { result: prop === value, value: prop };
    }
    prop = prop.toString();
    return compareText(prop, value, options);
}
export async function toHaveElementProperty(received, property, value, options = {}) {
    const isNot = this.isNot;
    const { expectation = 'property', verb = 'have' } = this;
    let el = await received;
    let prop;
    const pass = await waitUntil(async () => {
        const result = await executeCommand.call(this, el, condition, options, [property, value]);
        el = result.el;
        prop = result.values;
        return result.success;
    }, isNot, options);
    updateElementsArray(pass, received, el);
    let message;
    if (value === undefined) {
        message = enhanceError(el, !isNot, pass, this, verb, expectation, property, options);
    }
    else {
        const expected = wrapExpectedWithArray(el, prop, value);
        message = enhanceError(el, expected, prop, this, verb, expectation, property, options);
    }
    return {
        pass,
        message: () => message,
    };
}
