import { waitUntil, enhanceError, compareNumbers, numberError, executeCommand, wrapExpectedWithArray, updateElementsArray } from '../../utils.js';
async function condition(el, options) {
    const children = await el.$$('./*');
    if (typeof options.lte !== 'number' &&
        typeof options.gte !== 'number' &&
        typeof options.eq !== 'number') {
        return {
            result: children.length > 0,
            value: children?.length
        };
    }
    return {
        result: compareNumbers(children?.length, options),
        value: children?.length
    };
}
export async function toHaveChildren(received, expected, options = {}) {
    const isNot = this.isNot;
    const { expectation = 'children', verb = 'have' } = this;
    const numberOptions = typeof expected === 'number'
        ? { eq: expected }
        : expected || {};
    let el = await received;
    let children;
    const pass = await waitUntil(async () => {
        const result = await executeCommand.call(this, el, condition, numberOptions, [numberOptions]);
        el = result.el;
        children = result.values;
        return result.success;
    }, isNot, { ...numberOptions, ...options });
    updateElementsArray(pass, received, el);
    const error = numberError(numberOptions);
    const expectedArray = wrapExpectedWithArray(el, children, error);
    const message = enhanceError(el, expectedArray, children, this, verb, expectation, '', numberOptions);
    return {
        pass,
        message: () => message
    };
}
